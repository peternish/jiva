# =====
# SETUP
# =====

# Global environment variable
variables:
  SECRET_KEY: super-secret-key
  DATABASE_NAME: $DATABASE_NAME
  DATABASE_USER: $DATABASE_USER
  DATABASE_PASSWORD: $DATABASE_PASSWORD
  DATABASE_HOST: $DATABASE_HOST
  DATABASE_PORT: $DATABASE_PORT

# Coverage artifact
.coverage_artifacts: &coverage_artifacts
  artifacts:
    paths:
      - .coverage*

# Python machine update
.py_machine_update: &py_machine_update
  before_script:
    - apt -y update
    - DEBIAN_FRONTEND=noninteractive apt -y install apt-utils net-tools
    - apt -y upgrade
    - pip3 install -r requirements.txt


# ======
# STAGES
# ======

stages:
  - build
  - test
  - deploy

# Default image
default:
  image: python:3.9.10-buster


# Build: Django migration
migrations:
  <<: *py_machine_update
  stage: build
  script:
    - python3 manage.py makemigrations
    - python3 manage.py migrate
    - python3 manage.py check

# Testing: Unit testing
unit_testing:
  <<: *py_machine_update
  <<: *coverage_artifacts
  stage: test
  needs: ['migrations']
  script:
    - coverage run --parallel --include="./*" --omit="manage.py,jiva_be/*"
      manage.py test --exclude-tag=functional

# Testing: Code quality Check
code_quality:
  stage: test
  image: docker:19.03.12
  allow_failure: true
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.24-gitlab.1"
  needs: []
  script:
    - export SOURCE_CODE=$PWD
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
      function propagate_env_vars() {
        CURRENT_ENV=$(printenv)

        for VAR_NAME; do
          echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
        done
      }
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - |
      docker run --rm \
        $(propagate_env_vars \
          SOURCE_CODE \
          TIMEOUT_SECONDS \
          CODECLIMATE_DEBUG \
          CODECLIMATE_DEV \
          REPORT_STDOUT \
          REPORT_FORMAT \
          ENGINE_MEMORY_LIMIT_BYTES \
          CODECLIMATE_PREFIX \
        ) \
        --volume "$PWD":/code \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

# Testing: SonarQube testing
sonar_scanner:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  needs: []
  script:
    - sonar-scanner
      -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
      -Dsonar.host.url=https://sonarqube.cs.ui.ac.id/
      -Dsonar.login=$SONARQUBE_TOKEN
  rules:
    - if: '$CI_COMMIT_REF_NAME == "staging"'

# Deploy: Staging
staging:
  stage: deploy
  image: ruby:2.7
  needs: ['code_quality', 'unit_testing', 'sonar_scanner']
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - dpl --provider=heroku --app=$HEROKU_STAGING_NAME --api-key=$HEROKU_API_KEY --skip-cleanup
    - heroku run --app $HEROKU_STAGING_NAME migrate
  environment:
    name: production
    url: https://$HEROKU_STAGING_NAME.herokuapp.com
  rules:
    - if: '$CI_COMMIT_REF_NAME == "staging"'

# Deploy: App
deployment:
  image: ruby:2.7
  stage: deploy
  needs: ['code_quality', 'unit_testing', 'sonar_scanner']
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY --skip-cleanup
    - heroku run --app $HEROKU_APP_NAME migrate
  environment:
    name: production
    url: https://$HEROKU_APP_NAME.herokuapp.com
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
