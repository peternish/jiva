# =====
# SETUP
# =====

# Global environment variable
variables:
  SECRET_KEY: super-secret-key
  DATABASE_NAME: $DATABASE_NAME
  DATABASE_USER: $DATABASE_USER
  DATABASE_PASSWORD: $DATABASE_PASSWORD
  DATABASE_HOST: $DATABASE_HOST
  DATABASE_PORT: $DATABASE_PORT
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_STORAGE_BUCKET_NAME: $AWS_STORAGE_BUCKET_NAME

# Coverage artifact
.coverage_artifacts: &coverage_artifacts
  artifacts:
    paths:
      - coverage.xml

# Migrations artifact
.migration_artifacts: &migration_artifacts
  artifacts:
    paths:
      - '*/migrations*'

# Python machine update
.py_machine_update: &py_machine_update
  before_script:
    - apt -y update
    - DEBIAN_FRONTEND=noninteractive apt -y install apt-utils net-tools
    - apt -y upgrade
    - pip3 install -r requirements.txt

# Applies on MR
.apply_on_mr: &apply_on_mr
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"'


# ======
# STAGES
# ======

stages:
  - build
  - test
  - deploy

# Default image
default:
  image: python:3.9.10-buster


# Build: Django migration
migrations:
  <<: *py_machine_update
  <<: *migration_artifacts
  stage: build
  needs: []
  script:
    - python3 manage.py makemigrations
    - python3 manage.py migrate
    - python3 manage.py check
  only:
    - merge_requests
    - staging
    - master

# Testing: Unit testing
unit_testing:
  <<: *py_machine_update
  <<: *coverage_artifacts
  stage: test
  needs: ['migrations']
  script:
    - coverage run --omit="manage.py,jiva_be/*,**/__init__.py,**/tests.py" manage.py test
    - coverage report -m
    - coverage xml
  only:
    - merge_requests
    - staging
    - master

# Testing: SonarQube testing
sonar_scanner:
  <<: *apply_on_mr
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  needs: ['unit_testing']
  script:
    - sonar-scanner
      -Dsonar.projectName=Jiva
      -Dsonar.host.url=https://pmpl.cs.ui.ac.id/sonarqube/
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
      -Dsonar.login=$SONARQUBE_TOKEN
      -Dsonar.branch.name=$CI_COMMIT_REF_NAME
      -Dsonar.branch.target=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      -Dsonar.qualitygate.wait=true
      -Dsonar.python.coverage.reportPaths=coverage.xml
      -Dsonar.coverage.exclusions=**/*manage.py,**/*asgi.py,**/*wsgi.py,**/*settings.py

# Deploy: Staging
staging:
  stage: deploy
  image: ruby:2.7
  needs: ['unit_testing', 'sonar_scanner']
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - dpl --provider=heroku --app=$HEROKU_STAGING_NAME --api-key=$HEROKU_API_KEY --skip-cleanup
    - heroku run --app $HEROKU_STAGING_NAME migrate
  environment:
    name: production
    url: https://$HEROKU_STAGING_NAME.herokuapp.com
  rules:
    - if: '$CI_COMMIT_REF_NAME == "staging"'

# Deploy: App
deployment:
  image: ruby:2.7
  stage: deploy
  needs: ['unit_testing', 'sonar_scanner']
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY --skip-cleanup
    - heroku run --app $HEROKU_APP_NAME migrate
  environment:
    name: production
    url: https://$HEROKU_APP_NAME.herokuapp.com
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
